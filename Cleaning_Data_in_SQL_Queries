-- Cleaning Data in SQL Queries

select *
From nashvillehousing 


-- Standardize Date Format

ALTER TABLE nashvillehousing
ADD SaleDateConverted Date;

UPDATE nashvillehousing
SET SaleDateConverted = CONVERT(SaleDate, Date);

ALTER TABLE nashvillehousing
DROP COLUMN SaleDate;


-- Populate Property Address Data

SELECT PropertyAdress
FROM nashvillehousing
WHERE PropertyAddress is null;

SELECT *
FROM nashvillehousing
ORDER by ParcelID;

SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM nashvillehousing a
JOIN nashvillehousing b
	ON a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ] 
WHERE a.PropertyAddress is null;

UPDATE a
SET PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM nashvillehousing a
JOIN nashvillehousing b
	ON a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ] 
WHERE a.PropertyAddress is null;

-- Breaking out Address Into Individual Columns (Address, City, State) Using SUBSTRING

SELECT
SUBSTRING(PropertyAddress, 1, CHARDINDEX(',', PropertyAddress) -1) AS Address,
SUBSTRING(PropertyAddress, CHARDINDEX(',', PropertyAddress) +1, LEN(PropertyAddress)) AS Address
FROM nashvillehousing;

ALTER TABLE nashvillehousing
ADD PropertySplitAddress Nvarchar(255);

ALTER TABLE nashvillehousing
ADD PropertySplitCity Nvarchar(255);

UPDATE nashvillehousing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARDINDEX(',', PropertyAddress) -1);

UPDATE nashvillehousing
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARDINDEX(',', PropertyAddress) +1, LEN(PropertyAddress));


--Breaking out OwnerAddress Into Individual Columns (Address, City, State) Using ParseName

SELECT 
PARSENAME (REPLACE(OwnerAddress, ',' , '.'), 3) AS Address
,PARSENAME (REPLACE(OwnerAddress, ',' , '.'), 2) AS City
,PARSENAME (REPLACE(OwnerAddress, ',' , '.'), 1) AS State
FROM nashvillehousing


ALTER TABLE nashvillehousing
ADD OwnerSplitAddress Nvarchar(255);

ALTER TABLE nashvillehousing
ADD OwnerSplitCity Nvarchar(255);

ALTER TABLE nashvillehousing
ADD OwnerSplitState Nvarchar(255);

UPDATE nashvillehousing
SET OwnerSplitAddress = PARSENAME (REPLACE(OwnerAddress, ',' , '.'), 3);

UPDATE nashvillehousing
SET OwnerSplitCity = PARSENAME (REPLACE(OwnerAddress, ',' , '.'), 2);

UPDATE nashvillehousing
SET OwnerSplitState = PARSENAME (REPLACE(OwnerAddress, ',' , '.'), 1);


-- Change Y and N to Yes and No in "Sold as Vacant" field

SELECT Distinct(SoldAsVacant), Count(SoldAsVacant)
FROM nashvillehousing
GROUP BY SoldAsVacant
ORDER BY 2;


SELECT SolDAsVacant
	CASE when SoldAsVacant = 'Y' THEN 'Yes'
		 when SoldAsVacant = 'N' THEN 'No'
		 ELSE SoldAsVacant
		 END
FROM nashvillehousing

UPDATE nashvillehousing
SET SoldAsVacant
, CASE when SoldAsVacant = 'Y' THEN 'Yes'
		 when SoldAsVacant = 'N' THEN 'No'
		 ELSE SoldAsVacant
		 END;

-- Remove Duplication (Normally I would not delete data out of a Database but for the purpose of this exercise I am)

WITH RowNumCTE AS (
SELECT *,
	ROW_NUMBER() OVER(
	PARTITION BY ParcelID,
				 PropertyAddress, 
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
				 	UniqueID
				    ) row_num
FROM nashvillehousing
--ORDER BY ParcelID
)
DELETE
FROM RowNumCTE
WHERE row_num > 1;


-- Delete Unused Columns (I would never remove data from a Database but for the purpose of this exercise I am) Some of the removed columns have been replicated and parsed out to be more columns such as city, state, addresses for OwnerAddress and PropertyAddress.

ALTER TABLE nashvillehousing
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress, SaleDate;







